# Load the `shiny` package
install.packages("shiny")
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A widget: a text input box (save input in the `username` key)
textInput(inputId = "username", label = "What is your name?"),
# An output element: a text output (for the `message` key)
textOutput(outputId = "message")
# A `titlePanel()` layout with the text "Cost Calculator"
?titlePanel()
)
?titlePanel()
?numericInput()
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "username", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "username", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
tags$b("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "message", label = "Cost")
)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "username", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "username", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
tags$b("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "message")
)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
tags$b("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
"username", label =
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "username", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "username", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
tags$b("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
tags$b("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
input$price * input$quantity
})
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
input$price * input$quantity
})
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output){
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
input$price * input$quantity
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
?tabPanel
?titlePanel
?p()
?img()
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
b("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
tags$b("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- fluidPage(
tabPanel(title = "Introduction"),
# A `titlePanel()` with the text "Income Inequality"
titlePanel(title = "Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html"),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p()
)
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- fluidPage(
tabPanel(title = "Introduction"),
# A `titlePanel()` with the text "Income Inequality"
titlePanel(title = "Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html"),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p(strong(), em())
)
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(title = "Introduction",
# A `titlePanel()` with the text "Income Inequality"
titlePanel(title = "Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html"),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p(strong(), em())
)
?sidebarLayout
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(title = "Introduction",
# A `titlePanel()` with the text "Income Inequality"
titlePanel(title = "Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html"),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p(strong(), em())
)
# Define a variable `sidebar_content` as a `sidebarPanel()` UI element
# containing the following information:
sidebar_content <- sidebarPanel(
# A `sliderInput()` for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
sliderInput(inputId = "percentile", label = "Income Percentile", min = 0, max = 100)
)
# Define a variable `main_content` as a `mainPanel()` UI element
# containing the following information:
main_content <- mainPanel(
# A `plotOutput()` element showing the 'plot' output (defined in the server)
plotOutput(),
# A paragraph with a hyperlink to the data source
# http://gabriel-zucman.eu/usdina/
a(href = "http://gabriel-zucman.eu/usdina/")
)
# Define a variable `main_content` as a `mainPanel()` UI element
# containing the following information:
main_content <- mainPanel(
# A `plotOutput()` element showing the 'plot' output (defined in the server)
plotOutput(outputID = "plot"),
# A paragraph with a hyperlink to the data source
# http://gabriel-zucman.eu/usdina/
a(href = "http://gabriel-zucman.eu/usdina/")
)
# Define a variable `main_content` as a `mainPanel()` UI element
# containing the following information:
main_content <- mainPanel(
# A `plotOutput()` element showing the 'plot' output (defined in the server)
plotOutput(outputID = "plot"),
# A paragraph with a hyperlink to the data source
# http://gabriel-zucman.eu/usdina/
a(href = "http://gabriel-zucman.eu/usdina/")
)
# Define a variable `growth_panel` for your second page. It should be a
# `tabPanel()` with a title "Growth Chart" to represent the second tab.
# This layout will contain the following elements:
growth_panel <- tabPanel(
# A `titlePanel()` with the text "Income growth 1980-2014"
titlePanel(title = "Income growth 1980-2014"),
# A `sidebarLayout()` to create two columns.
# The sidebar layout will contain elements:
sidebarLayout(
# Your `sidebar_content`
sidebarPanel = sidebar_content,
# Your `main_content`
mainPanel = main_content
)
)
# Define a variable `sidebar_content` as a `sidebarPanel()` UI element
# containing the following information:
sidebar_content <- sidebarPanel(
# A `sliderInput()` for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
sliderInput(inputId = "percentile", label = "Income Percentile", min = 0, max = 100)
)
?sliderInput
# Define a variable `sidebar_content` as a `sidebarPanel()` UI element
# containing the following information:
sidebar_content <- sidebarPanel(
# A `sliderInput()` for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
sliderInput(inputId = "percentile", label = "Income Percentile", min = 0, max = 100, value = 0)
)
# Define a variable `main_content` as a `mainPanel()` UI element
# containing the following information:
main_content <- mainPanel(
# A `plotOutput()` element showing the 'plot' output (defined in the server)
plotOutput(outputID = "plot"),
# A paragraph with a hyperlink to the data source
# http://gabriel-zucman.eu/usdina/
a(href = "http://gabriel-zucman.eu/usdina/")
)
# Define a variable `growth_panel` for your second page. It should be a
# `tabPanel()` with a title "Growth Chart" to represent the second tab.
# This layout will contain the following elements:
growth_panel <- tabPanel(
# A `titlePanel()` with the text "Income growth 1980-2014"
titlePanel(title = "Income growth 1980-2014"),
# A `sidebarLayout()` to create two columns.
# The sidebar layout will contain elements:
sidebarLayout(
# Your `sidebar_content`
sidebarPanel = sidebar_content,
# Your `main_content`
mainPanel = main_content
)
)
?navbarPage
?shinyUI()
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
# - Your `intro_panel`
# - Your `growth_panel`
ui <- navbarPage(
title = "Income Inequality",
tabPanel(intro_panel, growth_panel)
)
# Define a variable `growth_panel` for your second page. It should be a
# `tabPanel()` with a title "Growth Chart" to represent the second tab.
# This layout will contain the following elements:
growth_panel <- tabPanel(
# A `titlePanel()` with the text "Income growth 1980-2014"
titlePanel(title = "Income growth 1980-2014"),
# A `sidebarLayout()` to create two columns.
# The sidebar layout will contain elements:
sidebarLayout(
# Your `sidebar_content`
sidebarPanel = sidebar_content,
# Your `main_content`
mainPanel = main_content
)
)
# Define a variable `main_content` as a `mainPanel()` UI element
# containing the following information:
main_content <- mainPanel(
# A `plotOutput()` element showing the 'plot' output (defined in the server)
plotOutput(outputID = "plot"),
# A paragraph with a hyperlink to the data source
# http://gabriel-zucman.eu/usdina/
a(href = "http://gabriel-zucman.eu/usdina/")
)
# Define a server function
server <- function(input, output) {
output$plot <- renderPlot({
# return the plot
ggplot(data = income_growth) +
geom_point(mapping = aes(
x = Income.Percentile, y = Average.Growth.Perc
), color = "gray") +
geom_point(mapping = aes(
x = Income.Percentile, y = Post.Tax.Growth.Perc
), color = "red") +
labs(x = "Income Percentile", y = "Income Growth (%)") +
scale_x_continuous(limits = input$percentile)
})
}
# Read data file
income_growth <- read.csv("data/income_growth_1980-2014.csv")
